// Copyright 2024 Clastix Labs
// SPDX-License-Identifier: Apache-2.0

package kubeconfig

import (
	"fmt"
	"io"
	"strings"

	"github.com/pkg/errors"
	"github.com/spf13/cobra"
	"k8s.io/apimachinery/pkg/util/sets"
	"k8s.io/cli-runtime/pkg/genericclioptions"
	"sigs.k8s.io/controller-runtime/pkg/client"

	"github.com/clastix/kamaji-kubectl-plugin/cmd/utils"
	"github.com/clastix/kamaji-kubectl-plugin/pkg/commands"
)

func NewRotateKubeconfig(writer io.Writer, flags *genericclioptions.ConfigFlags, k8sClient client.Client) *cobra.Command {
	var components []string
	var all bool

	cmd := cobra.Command{
		Use: "rotate {TCP_NAME} { --all=true | --components={COMPONENTS_LIST} }",
		Example: "  kubectl [--namespace=$NAMESPACE] kamaji kubeconfig rotate $TCP_NAME --all=true\n" +
			"  kubectl [--namespace=$NAMESPACE] kamaji kubeconfig rotate $TCP_NAME --components=Admin\n" +
			"  kubectl [--namespace=$NAMESPACE] kamaji kubeconfig rotate $TCP_NAME --certificates=Admin,ControllerManager",
		Short: "Rotate a kubeconfig",
		Long: "Kubeconfig generated by Kamaji are based on client certificate authentication. " +
			"Despite Kamaji performs rotation thanks to the CertificateLifecycle following the defined deadline, " +
			"you can trigger this action manually according to your needs.\n" +
			"\n" +
			"The CLI flag --components allows to specify which Control Plane components' kubeconfig objects should be rotated, " +
			"possible values: " + strings.Join(commands.RotateKubeconfigMap.Keys(), ", ") + ".\n" +
			"At least one must be specified, or mutually exclusive with --all.",
		Args: cobra.ExactArgs(1),
		ValidArgsFunction: func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			return utils.ValidArgsFunction(k8sClient, *flags.Namespace)(cmd, args, toComplete)
		},
		SilenceUsage: true,
		PreRunE: func(*cobra.Command, []string) error {
			switch {
			case all:
				return nil
			case len(components) == 0:
				return errors.New("at least one component must be specified")
			default:
				for _, arg := range components {
					if _, ok := commands.RotateKubeconfigMap[arg]; !ok {
						return fmt.Errorf("unrecognized component, %q", arg)
					}
				}

				return nil
			}
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			componentSet := sets.New[string](components...)

			toDelete := make(commands.RotateKubeconfigOptions)
			for k, v := range commands.RotateKubeconfigMap {
				if all || componentSet.Has(k) {
					toDelete[k] = v
				}
			}

			if err := (&commands.Helper{Client: k8sClient}).RotateKubeconfig(cmd.Context(), *flags.Namespace, args[0], toDelete); err != nil {
				return err //nolint:wrapcheck
			}
			//nolint:perfsprint
			_, _ = writer.Write([]byte(fmt.Sprintf("The following kubeconfig resources have been successfully rotated: %s", strings.Join(toDelete.Keys(), ","))))

			return nil
		},
	}

	cmd.Flags().StringSliceVar(&components, "components", []string{}, "List of Control Plane components that should have kubeconfig rotated.")
	cmd.Flags().BoolVar(&all, "all", false, "When specified, rotate all components' kubeconfig resources related to this Tenant Control Plane.")

	return &cmd
}
